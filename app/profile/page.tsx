"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import Link from "next/link"
import { useAuth } from "@/hooks/use-auth"
import { supabase } from "@/lib/supabase"
import {
  Mail,
  MapPin,
  Calendar,
  Shield,
  Settings,
  Edit,
  Camera,
  Award,
  TrendingUp,
  BarChart3,
  Users,
  MessageSquare,
  Star,
  Globe,
  Phone,
  ChevronDown,
  Briefcase,
  GraduationCap,
  Image,
} from "lucide-react"

export default function ProfilePage() {
  const { user, profile: authProfile, refreshProfile } = useAuth()
  const [profile, setProfile] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (user) {
      // Use authProfile if available, otherwise fetch
      if (authProfile) {
        setProfile(authProfile)
        setLoading(false)
      } else {
        fetchProfile()
      }
    }
  }, [user, authProfile])

  const fetchProfile = async () => {
    if (!user || !supabase) return

    try {
      console.log('Fetching profile for user:', user.id)
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('user_id', user.id)
        .single()

      if (error) {
        console.error('Error fetching profile:', error)
        if (error.code === 'PGRST116') {
          // Profile doesn't exist, create it
          await createDefaultProfile()
        } else {
          console.error('Unexpected error:', error)
        }
      } else {
        console.log('Profile fetched successfully:', data)
        setProfile(data)
      }
    } catch (error) {
      console.error('Error:', error)
    } finally {
      setLoading(false)
    }
  }

  const createDefaultProfile = async () => {
    if (!user || !supabase) return

    // Extract first and last name from user metadata or email
    const fullName = (user as any)?.user_metadata?.full_name || user.email?.split('@')[0] || 'User'
    const nameParts = fullName.split(' ')
    const firstName = nameParts[0] || 'User'
    const lastName = nameParts.slice(1).join(' ') || ''

    const defaultProfile = {
      user_id: user.id,
      email: user.email,
      first_name: firstName,
      last_name: lastName,
      username: user.email?.split('@')[0] || 'User',
      bio: '',
      location: '',
      website: '',
      phone: '',
      occupation: '',
      education: '',
      avatar_url: null,
      is_public: true
      // Note: id, created_at, and updated_at will be auto-generated by the database
    }

    try {
      const { data, error } = await supabase
        .from('profiles')
        .insert([defaultProfile])
        .select()
        .single()

      if (error) {
        console.error('Error creating profile:', error)
      } else {
        setProfile(data)
      }
    } catch (error) {
      console.error('Error:', error)
    }
  }

  const handleCoverPhotoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file || !user || !supabase) return

    try {
      // Upload to Supabase storage
      const fileName = `cover-photos/${user.id}/${Date.now()}-${file.name}`
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('post-media')
        .upload(fileName, file)

      if (uploadError) {
        console.error('Error uploading cover photo:', uploadError)
        return
      }

      // Get public URL
      const { data: urlData } = supabase.storage
        .from('post-media')
        .getPublicUrl(fileName)

      // Update profile with new cover photo URL
      const { error: updateError } = await supabase
        .from('profiles')
        .update({ cover_photo_url: urlData.publicUrl })
        .eq('user_id', user.id)

      if (updateError) {
        console.error('Error updating profile:', updateError)
        return
      }

      // Update local state
      setProfile(prev => prev ? { ...prev, cover_photo_url: urlData.publicUrl } : null)
      
      console.log('Cover photo uploaded successfully!')
    } catch (error) {
      console.error('Error uploading cover photo:', error)
    }
  }

  // Default stats and badges
  const defaultStats = {
    communities: 0,
    posts: 0,
    followers: 0,
    following: 0,
    reputation: 0,
  }

  const defaultBadges = [
    { name: "New Member", icon: "ðŸŒŸ", color: "bg-blue-100 text-blue-800" },
  ]

  if (loading) {
    return (
      <div className="min-h-screen bg-muted/30 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading profile...</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-muted/30 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Please sign in to view your profile</h1>
          <Button asChild>
            <Link href="/auth/signin">Sign In</Link>
          </Button>
        </div>
      </div>
    )
  }

  const userData = profile || {
    first_name: (user as any)?.user_metadata?.full_name?.split(' ')[0] || user.email?.split('@')[0] || 'User',
    last_name: (user as any)?.user_metadata?.full_name?.split(' ').slice(1).join(' ') || '',
    email: user.email,
    bio: '',
    location: '',
    website: '',
    phone: '',
    occupation: '',
    education: '',
    avatar_url: null,
    created_at: new Date().toISOString(),
  }

  return (
    <div className="min-h-screen bg-muted/30">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">Profile</h1>
          <p className="text-muted-foreground">Manage your personal information and account settings</p>
        </div>

        <div className="space-y-6">
          {/* Profile Info - Full Width */}
          <div className="space-y-6">
            {/* Enhanced Profile Header Card */}
            <Card className="overflow-hidden">
              {/* Cover Photo */}
              <div className="relative h-56 bg-gradient-to-r from-blue-500 to-purple-600">
                {profile?.cover_photo_url ? (
                  <img 
                    src={profile.cover_photo_url} 
                    alt="Cover photo" 
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-r from-blue-500 to-purple-600" />
                )}
                <Button
                  size="sm"
                  variant="outline"
                  className="absolute top-4 right-4 bg-white/90 hover:bg-white"
                  onClick={() => document.getElementById('cover-photo-input')?.click()}
                >
                  <Camera className="h-4 w-4 mr-2" />
                  Edit Cover
                </Button>
                <input
                  id="cover-photo-input"
                  type="file"
                  accept="image/*"
                  className="hidden"
                  onChange={handleCoverPhotoUpload}
                />
                
                {/* Profile Picture positioned at bottom-left of cover photo */}
                <div className="absolute bottom-0 left-6 transform translate-y-1/2">
                  <div className="relative">
                    <Avatar className="h-32 w-32 border-4 border-background">
                      <AvatarImage src={userData.avatar_url || "/placeholder.svg"} alt={`${userData.first_name} ${userData.last_name}`} />
                      <AvatarFallback className="text-3xl">
                        {`${userData.first_name} ${userData.last_name}`
                          .split(" ")
                          .map((n: string) => n[0])
                          .join("")}
                      </AvatarFallback>
                    </Avatar>
                    <Button
                      size="sm"
                      variant="outline"
                      className="absolute -bottom-2 -right-2 h-8 w-8 rounded-full p-0 bg-background"
                      asChild
                    >
                      <Link href="/profile/edit">
                        <Camera className="h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                </div>
              </div>

              {/* Action Buttons - Below Cover Photo */}
              <div className="px-6 pt-4 pb-2">
                <div className="flex justify-end gap-2">
                  <Button variant="outline" asChild>
                    <Link href="/profile/edit">
                      <Edit className="h-4 w-4 mr-2" />
                      Edit Profile
                    </Link>
                  </Button>
                  <Button variant="outline" asChild>
                    <Link href="/profile/settings">
                      <Settings className="h-4 w-4 mr-2" />
                      Settings
                    </Link>
                  </Button>
                </div>
              </div>

              <CardContent className="p-6 pt-4">
                <div className="flex flex-col sm:flex-row items-start sm:items-end gap-6">

                  {/* User Info */}
                  <div className="flex-1 space-y-3">
                    <div className="flex items-center gap-2 flex-wrap">
                      <h2 className="text-2xl font-bold">
                        {profile?.first_name && profile?.last_name 
                          ? `${profile.first_name} ${profile.last_name}`
                          : profile?.first_name || userData.first_name
                        }
                      </h2>
                      {profile?.username && (
                        <Badge variant="outline">@{profile.username}</Badge>
                      )}
                      <Badge variant="secondary" className="bg-green-100 text-green-800">
                        <Shield className="mr-1 h-3 w-3" />
                        Member
                      </Badge>
                    </div>
                    
                    
                    {/* Social Links */}
                    <div className="flex items-center gap-4 text-sm text-muted-foreground flex-wrap">
                      <div className="flex items-center gap-1">
                        <Mail className="h-4 w-4" />
                        {userData.email}
                      </div>
                      {userData.location && (
                        <div className="flex items-center gap-1">
                          <MapPin className="h-4 w-4" />
                          {userData.location}
                        </div>
                      )}
                      <div className="flex items-center gap-1">
                        <Calendar className="h-4 w-4" />
                        Joined {new Date(userData.created_at).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                      </div>
                      {profile?.website && (
                        <div className="flex items-center gap-1">
                          <Globe className="h-4 w-4" />
                          <a href={profile.website} target="_blank" rel="noopener noreferrer" className="hover:underline">
                            Website
                          </a>
                        </div>
                      )}
                      {profile?.linkedin && (
                        <div className="flex items-center gap-1">
                          <Globe className="h-4 w-4" />
                          <a href={profile.linkedin} target="_blank" rel="noopener noreferrer" className="hover:underline">
                            LinkedIn
                          </a>
                        </div>
                      )}
                      {profile?.twitter && (
                        <div className="flex items-center gap-1">
                          <Globe className="h-4 w-4" />
                          <a href={profile.twitter} target="_blank" rel="noopener noreferrer" className="hover:underline">
                            Twitter
                          </a>
                        </div>
                      )}
                    </div>
                  </div>

                </div>

                {/* Profile Statistics */}
                <div className="flex items-center gap-8 mt-6 pt-6 border-t">
                  <div className="text-center">
                    <div className="text-3xl font-bold text-blue-600">{profile?.posts_count || 0}</div>
                    <div className="text-sm text-muted-foreground">Posts</div>
                  </div>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-purple-600">{profile?.followers_count || 0}</div>
                    <div className="text-sm text-muted-foreground">Followers</div>
                  </div>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-orange-600">{profile?.following_count || 0}</div>
                    <div className="text-sm text-muted-foreground">Following</div>
                  </div>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-green-600">{profile?.likes_received || 0}</div>
                    <div className="text-sm text-muted-foreground">Likes</div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Navigation Tabs - Facebook Style */}
            <div className="border-b border-border">
              <nav className="flex space-x-8">
                <Button variant="ghost" className="px-0 py-4 border-b-2 border-primary rounded-none" asChild>
                  <Link href="/profile/posts">
                    Posts
                  </Link>
                </Button>
                <Button variant="ghost" className="px-0 py-4 border-b-2 border-transparent rounded-none hover:border-border" asChild>
                  <Link href="/profile/media">
                    Media Gallery
                  </Link>
                </Button>
                <Button variant="ghost" className="px-0 py-4 border-b-2 border-transparent rounded-none hover:border-border" asChild>
                  <Link href="/profile/followers">
                    Followers
                  </Link>
                </Button>
                <Button variant="ghost" className="px-0 py-4 border-b-2 border-transparent rounded-none hover:border-border" asChild>
                  <Link href="/profile/following">
                    Following
                  </Link>
                </Button>
                
                {/* Account Management - Dropdown */}
                <div className="ml-auto">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="px-2 py-4 border-b-2 border-transparent rounded-none hover:border-border">
                        Account Management
                        <ChevronDown className="h-4 w-4 ml-1" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="w-56">
                      <DropdownMenuItem asChild>
                        <Link href="/profile/account-protection" className="flex items-center">
                          <Shield className="h-4 w-4 mr-2" />
                          Account Protection
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link href="/profile/settings" className="flex items-center">
                          <Settings className="h-4 w-4 mr-2" />
                          Settings & Privacy
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link href="/profile/communities" className="flex items-center">
                          <Users className="h-4 w-4 mr-2" />
                          My Communities
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link href="/profile/investor-dashboard" className="flex items-center">
                          <TrendingUp className="h-4 w-4 mr-2" />
                          Investor Dashboard
                        </Link>
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </nav>
            </div>


            {/* Badges Card */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Award className="h-5 w-5" />
                  Achievements & Badges
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                  {defaultBadges.map((badge: any, index: number) => (
                    <div key={index} className="flex items-center gap-3 p-3 rounded-lg border bg-card">
                      <div className="text-2xl">{badge.icon}</div>
                      <div>
                        <div className="font-medium">{badge.name}</div>
                        <Badge variant="secondary" className={badge.color}>
                          Earned
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
